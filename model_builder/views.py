from django.shortcuts import redirect, render
from efootprint.api_utils.json_to_system import json_to_system
from efootprint import __version__ as efootprint_version
from efootprint.logger import logger

from model_builder.model_web import ModelWeb
from model_builder.object_creation_and_edition_utils import render_exception_modal
from utils import htmx_render

import json
import os
from django.http import HttpResponse
import matplotlib

matplotlib.use('Agg')
DEFAULT_GRAPH_WIDTH = 700


def model_builder_main(request, reboot=False):
    if reboot and reboot != "reboot":
        raise ValueError("reboot must be False or 'reboot'")
    if reboot == "reboot":
        with open(os.path.join("model_builder", "default_system_data.json"), "r") as file:
            system_data = json.load(file)
            request.session["system_data"] = system_data
        return redirect("model-builder")
    if "system_data" not in request.session.keys():
        return redirect("model-builder", reboot="reboot")

    if "efootprint_version" not in request.session["system_data"].keys():
        request.session["system_data"]["efootprint_version"] = "9.1.4"
    system_data_efootprint_version = request.session["system_data"]["efootprint_version"]

    model_web = ModelWeb(request.session)

    if efootprint_version != system_data_efootprint_version:
        logger.info(f"Upgraded system data from version {system_data_efootprint_version} to {efootprint_version}")
        request.session["system_data"]["efootprint_version"] = efootprint_version
        request.session.modified = True

    http_response = htmx_render(
        request, "model_builder/model_builder_main.html", context={"model_web": model_web})

    if request.headers.get("HX-Request") == "true":
        http_response["HX-Trigger-After-Settle"] = "initModelBuilderMain"

    return http_response

def open_import_json_panel(request):
    return render(request, "model_builder/side_panels/import_model.html")

def download_json(request):
    data = request.session.get('system_data', {})
    json_data = json.dumps(data, indent=4)
    response = HttpResponse(json_data, content_type='application/json')
    response['Content-Disposition'] = f'attachment; filename="efootprint-model-system-data.json"'

    return response


def upload_json(request):
    import_error_message = ""
    if "import-json-input" in request.FILES:
        try:
            file = request.FILES['import-json-input']
            if file and file.name.lower().endswith('.json'):
                data = json.load(file)
            else:
                import_error_message += "Invalid file format ! Please use a JSON file"
        except ValueError:
            import_error_message += "Invalid JSON data"
        try:
            json_to_system(data, launch_system_computations=False)
            request.session["system_data"] = data
            return redirect("model-builder")
        except Exception:
            import_error_message += ("Not a valid e-footprint model ! Please only input files generated by e-footprint "
                                     "or the interface")

    import_error_message += "No file uploaded"

    http_response = render(request, "model_builder/model_builder_main.html",
                  context={"import_error_message": import_error_message})
    http_response["HX-Trigger-After-Swap"] = "alertImportError"

    return http_response

def result_chart(request):
    try:
        model_web = ModelWeb(request.session)
        if len(model_web.system.servers) == 0:
            exception = ValueError(
                "No impact could be computed because the modeling is incomplete. Please make sure you have at least "
                "one usage pattern linked to a usage journey with at least one step making a request to a server.")
            return render_exception_modal(request, exception)
        else:
            # Launch system computations
            model_web.system.after_init()
    except Exception as e:
        return render_exception_modal(request, e)

    http_response = htmx_render(
        request, "model_builder/result_panel.html", context={'model_web': model_web})

    http_response["HX-Trigger-After-Swap"] = "computeResultChart"

    return http_response

